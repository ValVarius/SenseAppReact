{"ast":null,"code":"import { __extends, __spreadArrays } from \"tslib\";\nimport PDFName from \"./PDFName\";\nimport PDFNull from \"./PDFNull\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFDict = /** @class */function (_super) {\n  __extends(PDFDict, _super);\n  function PDFDict(map, context) {\n    var _this = _super.call(this) || this;\n    _this.dict = map;\n    _this.context = context;\n    return _this;\n  }\n  PDFDict.prototype.keys = function () {\n    return Array.from(this.dict.keys());\n  };\n  PDFDict.prototype.values = function () {\n    return Array.from(this.dict.values());\n  };\n  PDFDict.prototype.entries = function () {\n    return Array.from(this.dict.entries());\n  };\n  PDFDict.prototype.set = function (key, value) {\n    this.dict.set(key, value);\n  };\n  PDFDict.prototype.get = function (key,\n  // TODO: `preservePDFNull` is for backwards compatibility. Should be\n  // removed in next breaking API change.\n  preservePDFNull) {\n    if (preservePDFNull === void 0) {\n      preservePDFNull = false;\n    }\n    var value = this.dict.get(key);\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n  PDFDict.prototype.has = function (key) {\n    var value = this.dict.get(key);\n    return value !== undefined && value !== PDFNull;\n  };\n  PDFDict.prototype.lookupMaybe = function (key) {\n    var _a;\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    }\n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    var preservePDFNull = types.includes(PDFNull);\n    var value = (_a = this.context).lookupMaybe.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n  PDFDict.prototype.lookup = function (key) {\n    var _a;\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    }\n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    var preservePDFNull = types.includes(PDFNull);\n    var value = (_a = this.context).lookup.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n  PDFDict.prototype.delete = function (key) {\n    return this.dict.delete(key);\n  };\n  PDFDict.prototype.asMap = function () {\n    return new Map(this.dict);\n  };\n  /** Generate a random key that doesn't exist in current key set */\n  PDFDict.prototype.uniqueKey = function (tag) {\n    if (tag === void 0) {\n      tag = '';\n    }\n    var existingKeys = this.keys();\n    var key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n    while (existingKeys.includes(key)) {\n      key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n    }\n    return key;\n  };\n  PDFDict.prototype.clone = function (context) {\n    var clone = PDFDict.withContext(context || this.context);\n    var entries = this.entries();\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n        key = _a[0],\n        value = _a[1];\n      clone.set(key, value);\n    }\n    return clone;\n  };\n  PDFDict.prototype.toString = function () {\n    var dictString = '<<\\n';\n    var entries = this.entries();\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n        key = _a[0],\n        value = _a[1];\n      dictString += key.toString() + ' ' + value.toString() + '\\n';\n    }\n    dictString += '>>';\n    return dictString;\n  };\n  PDFDict.prototype.sizeInBytes = function () {\n    var size = 5;\n    var entries = this.entries();\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n        key = _a[0],\n        value = _a[1];\n      size += key.sizeInBytes() + value.sizeInBytes() + 2;\n    }\n    return size;\n  };\n  PDFDict.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.Newline;\n    var entries = this.entries();\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n        key = _a[0],\n        value = _a[1];\n      offset += key.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      offset += value.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n    buffer[offset++] = CharCodes.GreaterThan;\n    buffer[offset++] = CharCodes.GreaterThan;\n    return offset - initialOffset;\n  };\n  PDFDict.withContext = function (context) {\n    return new PDFDict(new Map(), context);\n  };\n  PDFDict.fromMapWithContext = function (map, context) {\n    return new PDFDict(map, context);\n  };\n  return PDFDict;\n}(PDFObject);\nexport default PDFDict;","map":{"version":3,"mappings":"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","names":["PDFName","PDFNull","PDFObject","CharCodes","__extends","map","context","_super","_this","dict","PDFDict","Array","from","keys","values","entries","key","value","set","preservePDFNull","get","undefined","_i","types","includes","lookupMaybe","lookup","delete","Map","tag","existingKeys","of","addRandomSuffix","clone","withContext","idx","len","length","dictString","toString","size","sizeInBytes","buffer","offset","initialOffset","LessThan","Newline","copyBytesInto","Space","GreaterThan"],"sources":["C:\\Users\\notit\\code22\\projects\\senseapp\\node_modules\\pdf-lib\\src\\core\\objects\\PDFDict.ts"],"sourcesContent":["import PDFArray from 'src/core/objects/PDFArray';\nimport PDFBool from 'src/core/objects/PDFBool';\nimport PDFHexString from 'src/core/objects/PDFHexString';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNull from 'src/core/objects/PDFNull';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFObject from 'src/core/objects/PDFObject';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFStream from 'src/core/objects/PDFStream';\nimport PDFString from 'src/core/objects/PDFString';\nimport PDFContext from 'src/core/PDFContext';\nimport CharCodes from 'src/core/syntax/CharCodes';\n\nexport type DictMap = Map<PDFName, PDFObject>;\n\nclass PDFDict extends PDFObject {\n  static withContext = (context: PDFContext) => new PDFDict(new Map(), context);\n\n  static fromMapWithContext = (map: DictMap, context: PDFContext) =>\n    new PDFDict(map, context);\n\n  readonly context: PDFContext;\n\n  private readonly dict: DictMap;\n\n  protected constructor(map: DictMap, context: PDFContext) {\n    super();\n    this.dict = map;\n    this.context = context;\n  }\n\n  keys(): PDFName[] {\n    return Array.from(this.dict.keys());\n  }\n\n  values(): PDFObject[] {\n    return Array.from(this.dict.values());\n  }\n\n  entries(): [PDFName, PDFObject][] {\n    return Array.from(this.dict.entries());\n  }\n\n  set(key: PDFName, value: PDFObject): void {\n    this.dict.set(key, value);\n  }\n\n  get(\n    key: PDFName,\n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    preservePDFNull = false,\n  ): PDFObject | undefined {\n    const value = this.dict.get(key);\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  }\n\n  has(key: PDFName): boolean {\n    const value = this.dict.get(key);\n    return value !== undefined && value !== PDFNull;\n  }\n\n  lookupMaybe(key: PDFName, type: typeof PDFArray): PDFArray | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFBool): PDFBool | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFDict): PDFDict | undefined;\n  lookupMaybe(\n    key: PDFName,\n    type: typeof PDFHexString,\n  ): PDFHexString | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFName): PDFName | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFNull): typeof PDFNull | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFNumber): PDFNumber | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFStream): PDFStream | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFRef): PDFRef | undefined;\n  lookupMaybe(key: PDFName, type: typeof PDFString): PDFString | undefined;\n  lookupMaybe(\n    ref: PDFName,\n    type1: typeof PDFString,\n    type2: typeof PDFHexString,\n  ): PDFString | PDFHexString | undefined;\n  lookupMaybe(\n    ref: PDFName,\n    type1: typeof PDFDict,\n    type2: typeof PDFStream,\n  ): PDFDict | PDFStream | undefined;\n  lookupMaybe(\n    ref: PDFName,\n    type1: typeof PDFString,\n    type2: typeof PDFHexString,\n    type3: typeof PDFArray,\n  ): PDFString | PDFHexString | PDFArray | undefined;\n\n  lookupMaybe(key: PDFName, ...types: any[]) {\n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    const preservePDFNull = types.includes(PDFNull);\n\n    const value = this.context.lookupMaybe(\n      this.get(key, preservePDFNull),\n      // @ts-ignore\n      ...types,\n    ) as any;\n\n    if (value === PDFNull && !preservePDFNull) return undefined;\n\n    return value;\n  }\n\n  lookup(key: PDFName): PDFObject | undefined;\n  lookup(key: PDFName, type: typeof PDFArray): PDFArray;\n  lookup(key: PDFName, type: typeof PDFBool): PDFBool;\n  lookup(key: PDFName, type: typeof PDFDict): PDFDict;\n  lookup(key: PDFName, type: typeof PDFHexString): PDFHexString;\n  lookup(key: PDFName, type: typeof PDFName): PDFName;\n  lookup(key: PDFName, type: typeof PDFNull): typeof PDFNull;\n  lookup(key: PDFName, type: typeof PDFNumber): PDFNumber;\n  lookup(key: PDFName, type: typeof PDFStream): PDFStream;\n  lookup(key: PDFName, type: typeof PDFRef): PDFRef;\n  lookup(key: PDFName, type: typeof PDFString): PDFString;\n  lookup(\n    ref: PDFName,\n    type1: typeof PDFString,\n    type2: typeof PDFHexString,\n  ): PDFString | PDFHexString;\n  lookup(\n    ref: PDFName,\n    type1: typeof PDFDict,\n    type2: typeof PDFStream,\n  ): PDFDict | PDFStream;\n  lookup(\n    ref: PDFName,\n    type1: typeof PDFString,\n    type2: typeof PDFHexString,\n    type3: typeof PDFArray,\n  ): PDFString | PDFHexString | PDFArray;\n\n  lookup(key: PDFName, ...types: any[]) {\n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    const preservePDFNull = types.includes(PDFNull);\n\n    const value = this.context.lookup(\n      this.get(key, preservePDFNull),\n      // @ts-ignore\n      ...types,\n    ) as any;\n\n    if (value === PDFNull && !preservePDFNull) return undefined;\n\n    return value;\n  }\n\n  delete(key: PDFName): boolean {\n    return this.dict.delete(key);\n  }\n\n  asMap(): Map<PDFName, PDFObject> {\n    return new Map(this.dict);\n  }\n\n  /** Generate a random key that doesn't exist in current key set */\n  uniqueKey(tag = ''): PDFName {\n    const existingKeys = this.keys();\n    let key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n    while (existingKeys.includes(key)) {\n      key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n    }\n    return key;\n  }\n\n  clone(context?: PDFContext): PDFDict {\n    const clone = PDFDict.withContext(context || this.context);\n    const entries = this.entries();\n    for (let idx = 0, len = entries.length; idx < len; idx++) {\n      const [key, value] = entries[idx];\n      clone.set(key, value);\n    }\n    return clone;\n  }\n\n  toString(): string {\n    let dictString = '<<\\n';\n    const entries = this.entries();\n    for (let idx = 0, len = entries.length; idx < len; idx++) {\n      const [key, value] = entries[idx];\n      dictString += key.toString() + ' ' + value.toString() + '\\n';\n    }\n    dictString += '>>';\n    return dictString;\n  }\n\n  sizeInBytes(): number {\n    let size = 5;\n    const entries = this.entries();\n    for (let idx = 0, len = entries.length; idx < len; idx++) {\n      const [key, value] = entries[idx];\n      size += key.sizeInBytes() + value.sizeInBytes() + 2;\n    }\n    return size;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    const initialOffset = offset;\n\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.Newline;\n\n    const entries = this.entries();\n    for (let idx = 0, len = entries.length; idx < len; idx++) {\n      const [key, value] = entries[idx];\n      offset += key.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      offset += value.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n\n    buffer[offset++] = CharCodes.GreaterThan;\n    buffer[offset++] = CharCodes.GreaterThan;\n\n    return offset - initialOffset;\n  }\n}\n\nexport default PDFDict;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}